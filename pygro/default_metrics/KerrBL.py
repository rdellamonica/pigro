import pygro

class KerrBL(pygro.Metric):
    def __init__(self, **kwargs):
        self.initialized = 0
        self.initialized_metric = 0
        self.geodesic_engine_linked = False
        metric_json = {"name": "Kerr - Boyer-Lindquist", "g": [["-(1-2*m*r/(r**2+a**2*cos(theta)**2))", "0", "0", "-(2*m*r*a*sin(theta)**2)/(r**2+a**2*cos(theta)**2)"], ["0", "(r**2+a**2*cos(theta)**2)/(r**2-2*m*r+a**2)", "0", "0"], ["0", "0", "(r**2+a**2*cos(theta)**2)", "0"], ["-(2*m*r*a*sin(theta)**2)/(r**2+a**2*cos(theta)**2)", "0", "0", "(r**2+a**2+(2*m*r*a**2*sin(theta)**2)/(r**2+a**2*cos(theta)**2))*sin(theta)**2"]], "x": ["t", "r", "theta", "phi"], "g_inv": [["(-a**4*cos(theta)**2 - 2*a**2*m*r*sin(theta)**2 - a**2*r**2*cos(theta)**2 - a**2*r**2 - r**4)/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4)", "0", "0", "-2*a*m*r/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4)"], ["0", "(a**2 - 2*m*r + r**2)/(a**2*cos(theta)**2 + r**2)", "0", "0"], ["0", "0", "1/(a**2*cos(theta)**2 + r**2)", "0"], ["-2*a*m*r/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4)", "0", "0", "(a**2*cos(theta)**2 - 2*m*r + r**2)/(a**4*sin(theta)**2*cos(theta)**2 + 2*a**2*m*r*sin(theta)**4 - 2*a**2*m*r*sin(theta)**2 + a**2*r**2*sin(theta)**2*cos(theta)**2 + a**2*r**2*sin(theta)**2 - 2*m*r**3*sin(theta)**2 + r**4*sin(theta)**2)"]], "eq_x": ["u_t", "u_r", "u_theta", "u_phi"], "eq_u": ["2*u_phi*u_r*(a*m*r*(-4*a**2*m*r**2*sin(theta)**2/(a**2*cos(theta)**2 + r**2)**2 + 2*a**2*m*sin(theta)**2/(a**2*cos(theta)**2 + r**2) + 2*r)*sin(theta)**2/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4) - (4*a*m*r**2*sin(theta)**2/(a**2*cos(theta)**2 + r**2)**2 - 2*a*m*sin(theta)**2/(a**2*cos(theta)**2 + r**2))*(-a**4*cos(theta)**2 - 2*a**2*m*r*sin(theta)**2 - a**2*r**2*cos(theta)**2 - a**2*r**2 - r**4)/(2*(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4))) + 2*u_phi*u_theta*(a*m*r*((4*a**4*m*r*sin(theta)**3*cos(theta)/(a**2*cos(theta)**2 + r**2)**2 + 4*a**2*m*r*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2))*sin(theta)**2 + 2*(2*a**2*m*r*sin(theta)**2/(a**2*cos(theta)**2 + r**2) + a**2 + r**2)*sin(theta)*cos(theta))/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4) - (-4*a**3*m*r*sin(theta)**3*cos(theta)/(a**2*cos(theta)**2 + r**2)**2 - 4*a*m*r*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2))*(-a**4*cos(theta)**2 - 2*a**2*m*r*sin(theta)**2 - a**2*r**2*cos(theta)**2 - a**2*r**2 - r**4)/(2*(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4))) + 2*u_r*u_t*(a*m*r*(4*a*m*r**2*sin(theta)**2/(a**2*cos(theta)**2 + r**2)**2 - 2*a*m*sin(theta)**2/(a**2*cos(theta)**2 + r**2))/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4) - (-4*m*r**2/(a**2*cos(theta)**2 + r**2)**2 + 2*m/(a**2*cos(theta)**2 + r**2))*(-a**4*cos(theta)**2 - 2*a**2*m*r*sin(theta)**2 - a**2*r**2*cos(theta)**2 - a**2*r**2 - r**4)/(2*(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4))) + 2*u_t*u_theta*(-2*a**2*m*r*(-a**4*cos(theta)**2 - 2*a**2*m*r*sin(theta)**2 - a**2*r**2*cos(theta)**2 - a**2*r**2 - r**4)*sin(theta)*cos(theta)/((a**2*cos(theta)**2 + r**2)**2*(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4)) + a*m*r*(-4*a**3*m*r*sin(theta)**3*cos(theta)/(a**2*cos(theta)**2 + r**2)**2 - 4*a*m*r*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2))/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4))", "2*a**2*u_r*u_theta*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2) + r*u_theta**2*(a**2 - 2*m*r + r**2)/(a**2*cos(theta)**2 + r**2) + u_phi**2*(a**2 - 2*m*r + r**2)*(-4*a**2*m*r**2*sin(theta)**2/(a**2*cos(theta)**2 + r**2)**2 + 2*a**2*m*sin(theta)**2/(a**2*cos(theta)**2 + r**2) + 2*r)*sin(theta)**2/(2*(a**2*cos(theta)**2 + r**2)) - u_phi*u_t*(-4*a*m*r**2*sin(theta)**2/(a**2*cos(theta)**2 + r**2)**2 + 2*a*m*sin(theta)**2/(a**2*cos(theta)**2 + r**2))*(a**2 - 2*m*r + r**2)/(a**2*cos(theta)**2 + r**2) - u_r**2*(2*r/(a**2 - 2*m*r + r**2) + (2*m - 2*r)*(a**2*cos(theta)**2 + r**2)/(a**2 - 2*m*r + r**2)**2)*(a**2 - 2*m*r + r**2)/(2*(a**2*cos(theta)**2 + r**2)) - u_t**2*(4*m*r**2/(a**2*cos(theta)**2 + r**2)**2 - 2*m/(a**2*cos(theta)**2 + r**2))*(a**2 - 2*m*r + r**2)/(2*(a**2*cos(theta)**2 + r**2))", "2*a**2*m*r*u_t**2*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2)**3 - a**2*u_r**2*sin(theta)*cos(theta)/((a**2*cos(theta)**2 + r**2)*(a**2 - 2*m*r + r**2)) + a**2*u_theta**2*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2) - 2*r*u_r*u_theta/(a**2*cos(theta)**2 + r**2) - u_phi**2*(-(4*a**4*m*r*sin(theta)**3*cos(theta)/(a**2*cos(theta)**2 + r**2)**2 + 4*a**2*m*r*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2))*sin(theta)**2 - 2*(2*a**2*m*r*sin(theta)**2/(a**2*cos(theta)**2 + r**2) + a**2 + r**2)*sin(theta)*cos(theta))/(2*(a**2*cos(theta)**2 + r**2)) - u_phi*u_t*(4*a**3*m*r*sin(theta)**3*cos(theta)/(a**2*cos(theta)**2 + r**2)**2 + 4*a*m*r*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2))/(a**2*cos(theta)**2 + r**2)", "2*u_phi*u_r*(a*m*r*(4*a*m*r**2*sin(theta)**2/(a**2*cos(theta)**2 + r**2)**2 - 2*a*m*sin(theta)**2/(a**2*cos(theta)**2 + r**2))/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4) - (a**2*cos(theta)**2 - 2*m*r + r**2)*(-4*a**2*m*r**2*sin(theta)**2/(a**2*cos(theta)**2 + r**2)**2 + 2*a**2*m*sin(theta)**2/(a**2*cos(theta)**2 + r**2) + 2*r)*sin(theta)**2/(2*(a**4*sin(theta)**2*cos(theta)**2 + 2*a**2*m*r*sin(theta)**4 - 2*a**2*m*r*sin(theta)**2 + a**2*r**2*sin(theta)**2*cos(theta)**2 + a**2*r**2*sin(theta)**2 - 2*m*r**3*sin(theta)**2 + r**4*sin(theta)**2))) + 2*u_phi*u_theta*(a*m*r*(-4*a**3*m*r*sin(theta)**3*cos(theta)/(a**2*cos(theta)**2 + r**2)**2 - 4*a*m*r*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2))/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4) - ((4*a**4*m*r*sin(theta)**3*cos(theta)/(a**2*cos(theta)**2 + r**2)**2 + 4*a**2*m*r*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2))*sin(theta)**2 + 2*(2*a**2*m*r*sin(theta)**2/(a**2*cos(theta)**2 + r**2) + a**2 + r**2)*sin(theta)*cos(theta))*(a**2*cos(theta)**2 - 2*m*r + r**2)/(2*(a**4*sin(theta)**2*cos(theta)**2 + 2*a**2*m*r*sin(theta)**4 - 2*a**2*m*r*sin(theta)**2 + a**2*r**2*sin(theta)**2*cos(theta)**2 + a**2*r**2*sin(theta)**2 - 2*m*r**3*sin(theta)**2 + r**4*sin(theta)**2))) + 2*u_r*u_t*(a*m*r*(-4*m*r**2/(a**2*cos(theta)**2 + r**2)**2 + 2*m/(a**2*cos(theta)**2 + r**2))/(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4) - (4*a*m*r**2*sin(theta)**2/(a**2*cos(theta)**2 + r**2)**2 - 2*a*m*sin(theta)**2/(a**2*cos(theta)**2 + r**2))*(a**2*cos(theta)**2 - 2*m*r + r**2)/(2*(a**4*sin(theta)**2*cos(theta)**2 + 2*a**2*m*r*sin(theta)**4 - 2*a**2*m*r*sin(theta)**2 + a**2*r**2*sin(theta)**2*cos(theta)**2 + a**2*r**2*sin(theta)**2 - 2*m*r**3*sin(theta)**2 + r**4*sin(theta)**2))) + 2*u_t*u_theta*(4*a**3*m**2*r**2*sin(theta)*cos(theta)/((a**2*cos(theta)**2 + r**2)**2*(a**4*cos(theta)**2 + 2*a**2*m*r*sin(theta)**2 - 2*a**2*m*r + a**2*r**2*cos(theta)**2 + a**2*r**2 - 2*m*r**3 + r**4)) - (-4*a**3*m*r*sin(theta)**3*cos(theta)/(a**2*cos(theta)**2 + r**2)**2 - 4*a*m*r*sin(theta)*cos(theta)/(a**2*cos(theta)**2 + r**2))*(a**2*cos(theta)**2 - 2*m*r + r**2)/(2*(a**4*sin(theta)**2*cos(theta)**2 + 2*a**2*m*r*sin(theta)**4 - 2*a**2*m*r*sin(theta)**2 + a**2*r**2*sin(theta)**2*cos(theta)**2 + a**2*r**2*sin(theta)**2 - 2*m*r**3*sin(theta)**2 + r**4*sin(theta)**2)))"], "u0_timelike": "-2*a*m*r*u_phi*sin(theta)**2/(a**2*cos(theta)**2 - 2*m*r + r**2) - sqrt((a**2*cos(theta)**2 + r**2)*(a**2 - 2*m*r + r**2)*(a**6*u_phi**2*sin(theta)**2*cos(theta)**2 + a**6*u_theta**2*cos(theta)**4 + 2*a**4*m*r*u_phi**2*sin(theta)**4 - 2*a**4*m*r*u_phi**2*sin(theta)**2*cos(theta)**2 - 2*a**4*m*r*u_phi**2*sin(theta)**2 - 2*a**4*m*r*u_theta**2*cos(theta)**4 - 2*a**4*m*r*u_theta**2*cos(theta)**2 + 2*a**4*r**2*u_phi**2*sin(theta)**2*cos(theta)**2 + a**4*r**2*u_phi**2*sin(theta)**2 + a**4*r**2*u_theta**2*cos(theta)**4 + 2*a**4*r**2*u_theta**2*cos(theta)**2 + a**4*u_r**2*cos(theta)**4 + a**4*cos(theta)**2 - 4*a**2*m**2*r**2*u_phi**2*sin(theta)**4 + 4*a**2*m**2*r**2*u_phi**2*sin(theta)**2 + 4*a**2*m**2*r**2*u_theta**2*cos(theta)**2 + 2*a**2*m*r**3*u_phi**2*sin(theta)**4 - 2*a**2*m*r**3*u_phi**2*sin(theta)**2*cos(theta)**2 - 6*a**2*m*r**3*u_phi**2*sin(theta)**2 - 6*a**2*m*r**3*u_theta**2*cos(theta)**2 - 2*a**2*m*r**3*u_theta**2 - 2*a**2*m*r*u_r**2*cos(theta)**2 - 2*a**2*m*r*cos(theta)**2 - 2*a**2*m*r + a**2*r**4*u_phi**2*sin(theta)**2*cos(theta)**2 + 2*a**2*r**4*u_phi**2*sin(theta)**2 + 2*a**2*r**4*u_theta**2*cos(theta)**2 + a**2*r**4*u_theta**2 + 2*a**2*r**2*u_r**2*cos(theta)**2 + a**2*r**2*cos(theta)**2 + a**2*r**2 + 4*m**2*r**4*u_phi**2*sin(theta)**2 + 4*m**2*r**4*u_theta**2 + 4*m**2*r**2 - 4*m*r**5*u_phi**2*sin(theta)**2 - 4*m*r**5*u_theta**2 - 2*m*r**3*u_r**2 - 4*m*r**3 + r**6*u_phi**2*sin(theta)**2 + r**6*u_theta**2 + r**4*u_r**2 + r**4))/(-a**4*cos(theta)**2 + 2*a**2*m*r*cos(theta)**2 + 2*a**2*m*r - a**2*r**2*cos(theta)**2 - a**2*r**2 - 4*m**2*r**2 + 4*m*r**3 - r**4)", "u0_null": "-2*a*m*r*u_phi*sin(theta)**2/(a**2*cos(theta)**2 - 2*m*r + r**2) - sqrt((a**2*cos(theta)**2 + r**2)*(a**2 - 2*m*r + r**2)*(a**6*u_phi**2*sin(theta)**2*cos(theta)**2 + a**6*u_theta**2*cos(theta)**4 + 2*a**4*m*r*u_phi**2*sin(theta)**4 - 2*a**4*m*r*u_phi**2*sin(theta)**2*cos(theta)**2 - 2*a**4*m*r*u_phi**2*sin(theta)**2 - 2*a**4*m*r*u_theta**2*cos(theta)**4 - 2*a**4*m*r*u_theta**2*cos(theta)**2 + 2*a**4*r**2*u_phi**2*sin(theta)**2*cos(theta)**2 + a**4*r**2*u_phi**2*sin(theta)**2 + a**4*r**2*u_theta**2*cos(theta)**4 + 2*a**4*r**2*u_theta**2*cos(theta)**2 + a**4*u_r**2*cos(theta)**4 - 4*a**2*m**2*r**2*u_phi**2*sin(theta)**4 + 4*a**2*m**2*r**2*u_phi**2*sin(theta)**2 + 4*a**2*m**2*r**2*u_theta**2*cos(theta)**2 + 2*a**2*m*r**3*u_phi**2*sin(theta)**4 - 2*a**2*m*r**3*u_phi**2*sin(theta)**2*cos(theta)**2 - 6*a**2*m*r**3*u_phi**2*sin(theta)**2 - 6*a**2*m*r**3*u_theta**2*cos(theta)**2 - 2*a**2*m*r**3*u_theta**2 - 2*a**2*m*r*u_r**2*cos(theta)**2 + a**2*r**4*u_phi**2*sin(theta)**2*cos(theta)**2 + 2*a**2*r**4*u_phi**2*sin(theta)**2 + 2*a**2*r**4*u_theta**2*cos(theta)**2 + a**2*r**4*u_theta**2 + 2*a**2*r**2*u_r**2*cos(theta)**2 + 4*m**2*r**4*u_phi**2*sin(theta)**2 + 4*m**2*r**4*u_theta**2 - 4*m*r**5*u_phi**2*sin(theta)**2 - 4*m*r**5*u_theta**2 - 2*m*r**3*u_r**2 + r**6*u_phi**2*sin(theta)**2 + r**6*u_theta**2 + r**4*u_r**2))/(-a**4*cos(theta)**2 + 2*a**2*m*r*cos(theta)**2 + 2*a**2*m*r - a**2*r**2*cos(theta)**2 - a**2*r**2 - 4*m**2*r**2 + 4*m*r**3 - r**4)"}
        self.load_metric_from_json(metric_json, **kwargs)